name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch: # Manual trigger option

env:
  # Azure Container Registry Configuration
  ACR_LOGIN_SERVER: 'demoinvoiceanalyticsa.azurecr.io'
  ACR_NAME: 'demoinvoiceanalyticsa'
  RESOURCE_GROUP_NAME: 'demo-invoice-analytics'
  API_APP_NAME: 'invoice-analytics-api-app'
  CLIENT_APP_NAME: 'invoice-analytics-app'
  PREFIX: 'aitemplate'
  ENVIRONMENT: 'test'

jobs:
  # ==================== CI Stage ====================
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          VERSION="${{ github.run_number }}-${{ github.sha }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      # Build and push both images in parallel
      - name: Build and Push API Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/api:${{ steps.version.outputs.version }}
            ${{ env.ACR_LOGIN_SERVER }}/api:latest
          cache-from: |
            type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/api:buildcache
            type=gha
          cache-to: |
            type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/api:buildcache,mode=max
            type=gha,mode=max
          platforms: linux/amd64

      - name: Build and Push Client Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          build-args: |
            VITE_API_URL=${{ vars.VITE_API_URL }}
            VITE_CLERK_PUBLISHABLE_KEY=${{ vars.VITE_CLERK_PUBLISHABLE_KEY }}
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/client:${{ steps.version.outputs.version }}
            ${{ env.ACR_LOGIN_SERVER }}/client:latest
          cache-from: |
            type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/client:buildcache
            type=gha
          cache-to: |
            type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/client:buildcache,mode=max
            type=gha,mode=max
          platforms: linux/amd64

  # ==================== CD Stage ====================
  deploy:
    name: Deploy to Azure
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update API App Service Configuration
        run: |
          az webapp config appsettings set \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.API_APP_NAME }} \
            --settings \
              CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
              DEFAULT_SUPER_ADMIN_EMAIL="${{ secrets.DEFAULT_SUPER_ADMIN_EMAIL }}" \
              DEFAULT_TENANT_ID="${{ secrets.DEFAULT_TENANT_ID }}" \
              NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" \
              CORS_ORIGIN="${{ secrets.CORS_ORIGIN }}" \
              SENTRY_DSN="${{ secrets.SENTRY_DSN }}" \
              SENTRY_RELEASE="${{ needs.build.outputs.version }}" \
              DOCKER_REGISTRY_SERVER_URL="${{ env.ACR_LOGIN_SERVER }}" \
              DOCKER_REGISTRY_SERVER_USERNAME="${{ env.ACR_NAME }}" \
              DOCKER_REGISTRY_SERVER_PASSWORD="${{ secrets.ACR_PASSWORD }}"

      # Deploy both services in parallel
      - name: Deploy Services
        run: |
          # Deploy API in background
          az webapp config container set \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.API_APP_NAME }} \
            --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/api:${{ needs.build.outputs.version }} &
          
          # Deploy Client in background
          az webapp config container set \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.CLIENT_APP_NAME }} \
            --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/client:${{ needs.build.outputs.version }} &
          
          # Wait for both deployments
          wait

      - name: Restart App Services
        run: |
          # Restart both services in parallel
          az webapp restart --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.API_APP_NAME }} &
          az webapp restart --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CLIENT_APP_NAME }} &
          wait

      - name: Verify Deployment
        run: |
          echo "Deployment completed successfully!"
          echo "API App: https://${{ env.API_APP_NAME }}.azurewebsites.net"
          echo "Client App: https://${{ env.CLIENT_APP_NAME }}.azurewebsites.net"
          echo "Version: ${{ needs.build.outputs.version }}"