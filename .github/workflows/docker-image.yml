name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch: # Manual trigger option

env:
  # Azure Container Registry Configuration
  ACR_LOGIN_SERVER: 'demoinvoiceanalyticsa.azurecr.io'
  ACR_NAME: 'demoinvoiceanalyticsa'
  RESOURCE_GROUP_NAME: 'demo-invoice-analytics'
  API_APP_NAME: 'invoice-analytics-api-app'
  CLIENT_APP_NAME: 'invoice-analytics-app'
  PREFIX: 'aitemplate'
  ENVIRONMENT: 'test'

jobs:
  # ==================== CI Stage ====================
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          VERSION="${{ github.run_number }}-${{ github.sha }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: false
          tags: api:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/api-image.tar

      - name: Build Client Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: false
          build-args: |
            VITE_API_URL=${{ vars.VITE_API_URL }}
            VITE_CLERK_PUBLISHABLE_KEY=${{ vars.VITE_CLERK_PUBLISHABLE_KEY }}
          tags: client:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/client-image.tar

      - name: Upload Docker Images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: /tmp/*-image.tar
          retention-days: 7

      - name: Create Deployment Manifest
        run: |
          cat > deployment.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "images": {
              "api": "api:${{ steps.version.outputs.version }}",
              "client": "client:${{ steps.version.outputs.version }}"
            }
          }
          EOF
          cat deployment.json

      - name: Upload Deployment Manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment.json
          retention-days: 7

  # ==================== CD Stage ====================
  deploy:
    name: Deploy to Azure
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ./docker-images

      - name: Download Deployment Manifest
        uses: actions/download-artifact@v4
        with:
          name: deployment-manifest
          path: ./

      - name: Load Docker Images
        run: |
          docker load -i ./docker-images/api-image.tar
          docker load -i ./docker-images/client-image.tar
          docker image ls

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Push Images to Azure Container Registry
        run: |
          # Login to ACR
          az acr login --name ${{ env.ACR_NAME }}
          
          VERSION="${{ needs.build.outputs.version }}"
          echo "Deploying version: $VERSION"
          
          # Tag and push API image
          docker tag api:$VERSION ${{ env.ACR_LOGIN_SERVER }}/api:$VERSION
          docker tag api:$VERSION ${{ env.ACR_LOGIN_SERVER }}/api:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/api:$VERSION
          docker push ${{ env.ACR_LOGIN_SERVER }}/api:latest
          
          # Tag and push Client image
          docker tag client:$VERSION ${{ env.ACR_LOGIN_SERVER }}/client:$VERSION
          docker tag client:$VERSION ${{ env.ACR_LOGIN_SERVER }}/client:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/client:$VERSION
          docker push ${{ env.ACR_LOGIN_SERVER }}/client:latest

      - name: Update API App Service Configuration
        run: |
          az webapp config appsettings set \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.API_APP_NAME }} \
            --settings \
              CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
              DEFAULT_SUPER_ADMIN_EMAIL="${{ secrets.DEFAULT_SUPER_ADMIN_EMAIL }}" \
              DEFAULT_TENANT_ID="${{ secrets.DEFAULT_TENANT_ID }}" \
              NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" \
              CORS_ORIGIN="${{ secrets.CORS_ORIGIN }}" \
              SENTRY_DSN="${{ secrets.SENTRY_DSN }}" \
              SENTRY_RELEASE="${{ needs.build.outputs.version }}" \
              DOCKER_REGISTRY_SERVER_URL="${{ env.ACR_LOGIN_SERVER }}" \
              DOCKER_REGISTRY_SERVER_USERNAME="${{ env.ACR_NAME }}" \
              DOCKER_REGISTRY_SERVER_PASSWORD="${{ secrets.ACR_PASSWORD }}"

      - name: Deploy API to App Service
        run: |
          az webapp config container set \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.API_APP_NAME }} \
            --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/api:${{ needs.build.outputs.version }}

      - name: Deploy Client to App Service
        run: |
          az webapp config container set \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.CLIENT_APP_NAME }} \
            --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/client:${{ needs.build.outputs.version }}

      - name: Restart App Services
        run: |
          az webapp restart --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.API_APP_NAME }}
          az webapp restart --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CLIENT_APP_NAME }}

      - name: Verify Deployment
        run: |
          echo "Deployment completed successfully!"
          echo "API App: https://${{ env.API_APP_NAME }}.azurewebsites.net"
          echo "Client App: https://${{ env.CLIENT_APP_NAME }}.azurewebsites.net"
          echo "Version: ${{ needs.build.outputs.version }}"
